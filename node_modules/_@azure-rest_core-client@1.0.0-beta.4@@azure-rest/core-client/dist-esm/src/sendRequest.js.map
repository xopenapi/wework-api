{"version":3,"file":"sendRequest.js","sourceRoot":"","sources":["../../src/sendRequest.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC,OAAO,EACL,iBAAiB,EACjB,qBAAqB,GAItB,MAAM,2BAA2B,CAAC;AACnC,OAAO,EAAE,2BAA2B,EAAE,MAAM,iBAAiB,CAAC;AAI9D;;;;;;;GAOG;AACH,MAAM,UAAgB,WAAW,CAC/B,MAAmB,EACnB,GAAW,EACX,QAAkB,EAClB,UAA6B,EAAE;;;QAE/B,MAAM,UAAU,GAAG,2BAA2B,EAAE,CAAC;QAEjD,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAEnF,MAAM,OAAO,GAAG,iBAAiB,+BAC/B,MAAM,EAAE,MAAA,OAAO,CAAC,MAAM,mCAAI,kBAAkB,IACzC,CAAC,IAAI,KAAK,SAAS,IAAI;YACxB,cAAc,EAAE,MAAA,OAAO,CAAC,WAAW,mCAAI,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC;SACpE,CAAC,GACC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAC3C,CAAC;QAEH,MAAM,OAAO,GAAG,qBAAqB,CAAC;YACpC,GAAG;YACH,MAAM;YACN,IAAI;YACJ,OAAO;YACP,uBAAuB,EAAE,OAAO,CAAC,uBAAuB;SACzD,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,WAAW,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QAC/D,MAAM,UAAU,GAAmB,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;QAE3D,IAAI,UAAU,GAAG,SAAS,CAAC;QAE3B,IAAI;YACF,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;SAC5E;QAAC,WAAM;YACN,UAAU,GAAG,SAAS,CAAC;SACxB;QAED,OAAO;YACL,OAAO;YACP,OAAO,EAAE,UAAU;YACnB,MAAM,EAAE,GAAG,MAAM,CAAC,MAAM,EAAE;YAC1B,IAAI,EAAE,UAAU;SACjB,CAAC;;CACH;AAED;;;;;GAKG;AACH,SAAS,cAAc,CAAC,IAAS;IAC/B,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;QAC5B,OAAO,0BAA0B,CAAC;KACnC;IAED,yBAAyB;IACzB,OAAO,iCAAiC,CAAC;AAC3C,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  createHttpHeaders,\n  createPipelineRequest,\n  HttpMethods,\n  Pipeline,\n  RawHttpHeaders,\n} from \"@azure/core-rest-pipeline\";\nimport { getCachedDefaultHttpsClient } from \"./clientHelpers\";\nimport { RequestParameters } from \"./pathClientTypes\";\nimport { HttpResponse } from \"./common\";\n\n/**\n * Helper function to send request used by the client\n * @param method - method to use to send the request\n * @param url - url to send the request to\n * @param pipeline - pipeline with the policies to run when sending the request\n * @param options - request options\n * @returns returns and HttpResponse\n */\nexport async function sendRequest(\n  method: HttpMethods,\n  url: string,\n  pipeline: Pipeline,\n  options: RequestParameters = {}\n): Promise<HttpResponse> {\n  const httpClient = getCachedDefaultHttpsClient();\n\n  const body = options.body !== undefined ? JSON.stringify(options.body) : undefined;\n\n  const headers = createHttpHeaders({\n    accept: options.accept ?? \"application/json\",\n    ...(body !== undefined && {\n      \"content-type\": options.contentType ?? getContentType(options.body),\n    }),\n    ...(options.headers ? options.headers : {}),\n  });\n\n  const request = createPipelineRequest({\n    url,\n    method,\n    body,\n    headers,\n    allowInsecureConnection: options.allowInsecureConnection,\n  });\n\n  const result = await pipeline.sendRequest(httpClient, request);\n  const rawHeaders: RawHttpHeaders = result.headers.toJSON();\n\n  let parsedBody = undefined;\n\n  try {\n    parsedBody = result.bodyAsText ? JSON.parse(result.bodyAsText) : undefined;\n  } catch {\n    parsedBody = undefined;\n  }\n\n  return {\n    request,\n    headers: rawHeaders,\n    status: `${result.status}`,\n    body: parsedBody,\n  };\n}\n\n/**\n * Function to determine the content-type of a body\n * this is used if an explicit content-type is not provided\n * @param body - body in the request\n * @returns returns the content-type\n */\nfunction getContentType(body: any): string {\n  if (ArrayBuffer.isView(body)) {\n    return \"application/octet-stream\";\n  }\n\n  // By default return json\n  return \"application/json; charset=UTF-8\";\n}\n"]}