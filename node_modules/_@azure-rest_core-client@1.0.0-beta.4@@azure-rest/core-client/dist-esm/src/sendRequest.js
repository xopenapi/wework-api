// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __awaiter } from "tslib";
import { createHttpHeaders, createPipelineRequest, } from "@azure/core-rest-pipeline";
import { getCachedDefaultHttpsClient } from "./clientHelpers";
/**
 * Helper function to send request used by the client
 * @param method - method to use to send the request
 * @param url - url to send the request to
 * @param pipeline - pipeline with the policies to run when sending the request
 * @param options - request options
 * @returns returns and HttpResponse
 */
export function sendRequest(method, url, pipeline, options = {}) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const httpClient = getCachedDefaultHttpsClient();
        const body = options.body !== undefined ? JSON.stringify(options.body) : undefined;
        const headers = createHttpHeaders(Object.assign(Object.assign({ accept: (_a = options.accept) !== null && _a !== void 0 ? _a : "application/json" }, (body !== undefined && {
            "content-type": (_b = options.contentType) !== null && _b !== void 0 ? _b : getContentType(options.body),
        })), (options.headers ? options.headers : {})));
        const request = createPipelineRequest({
            url,
            method,
            body,
            headers,
            allowInsecureConnection: options.allowInsecureConnection,
        });
        const result = yield pipeline.sendRequest(httpClient, request);
        const rawHeaders = result.headers.toJSON();
        let parsedBody = undefined;
        try {
            parsedBody = result.bodyAsText ? JSON.parse(result.bodyAsText) : undefined;
        }
        catch (_c) {
            parsedBody = undefined;
        }
        return {
            request,
            headers: rawHeaders,
            status: `${result.status}`,
            body: parsedBody,
        };
    });
}
/**
 * Function to determine the content-type of a body
 * this is used if an explicit content-type is not provided
 * @param body - body in the request
 * @returns returns the content-type
 */
function getContentType(body) {
    if (ArrayBuffer.isView(body)) {
        return "application/octet-stream";
    }
    // By default return json
    return "application/json; charset=UTF-8";
}
//# sourceMappingURL=sendRequest.js.map