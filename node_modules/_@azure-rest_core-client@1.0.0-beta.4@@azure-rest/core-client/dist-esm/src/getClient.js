// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { isTokenCredential } from "@azure/core-auth";
import { isCertificateCredential } from "./certificateCredential";
import { createDefaultPipeline } from "./clientHelpers";
import { sendRequest } from "./sendRequest";
import { buildRequestUrl } from "./urlHelpers";
export function getClient(baseUrl, credentialsOrPipelineOptions, clientOptions = {}) {
    let credentials;
    if (credentialsOrPipelineOptions) {
        if (isCredential(credentialsOrPipelineOptions)) {
            credentials = credentialsOrPipelineOptions;
        }
        else {
            clientOptions = credentialsOrPipelineOptions !== null && credentialsOrPipelineOptions !== void 0 ? credentialsOrPipelineOptions : {};
        }
    }
    const pipeline = createDefaultPipeline(baseUrl, credentials, clientOptions);
    const client = (path, ...args) => {
        return {
            get: (options = {}) => {
                return buildSendRequest("GET", clientOptions, baseUrl, path, pipeline, options, args);
            },
            post: (options = {}) => {
                return buildSendRequest("POST", clientOptions, baseUrl, path, pipeline, options, args);
            },
            put: (options = {}) => {
                return buildSendRequest("PUT", clientOptions, baseUrl, path, pipeline, options, args);
            },
            patch: (options = {}) => {
                return buildSendRequest("PATCH", clientOptions, baseUrl, path, pipeline, options, args);
            },
            delete: (options = {}) => {
                return buildSendRequest("DELETE", clientOptions, baseUrl, path, pipeline, options, args);
            },
            head: (options = {}) => {
                return buildSendRequest("HEAD", clientOptions, baseUrl, path, pipeline, options, args);
            },
            options: (options = {}) => {
                return buildSendRequest("OPTIONS", clientOptions, baseUrl, path, pipeline, options, args);
            },
            trace: (options = {}) => {
                return buildSendRequest("TRACE", clientOptions, baseUrl, path, pipeline, options, args);
            },
        };
    };
    return {
        path: client,
        pathUnchecked: client,
        pipeline,
    };
}
function buildSendRequest(method, clientOptions, baseUrl, path, pipeline, requestOptions = {}, args = []) {
    var _a;
    // If the client has an api-version and the request doesn't specify one, inject the one in the client options
    if (!((_a = requestOptions.queryParameters) === null || _a === void 0 ? void 0 : _a["api-version"]) && clientOptions.apiVersion) {
        if (!requestOptions.queryParameters) {
            requestOptions.queryParameters = {};
        }
        requestOptions.queryParameters["api-version"] = clientOptions.apiVersion;
    }
    const url = buildRequestUrl(baseUrl, path, args, requestOptions);
    return sendRequest(method, url, pipeline, requestOptions);
}
function isCredential(param) {
    if (param.key !== undefined ||
        isTokenCredential(param) ||
        isCertificateCredential(param)) {
        return true;
    }
    return false;
}
//# sourceMappingURL=getClient.js.map