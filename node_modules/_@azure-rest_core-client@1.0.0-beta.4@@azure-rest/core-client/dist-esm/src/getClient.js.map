{"version":3,"file":"getClient.js","sourceRoot":"","sources":["../../src/getClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isTokenCredential, KeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport { isCertificateCredential } from \"./certificateCredential\";\nimport { HttpMethods, Pipeline, PipelineOptions } from \"@azure/core-rest-pipeline\";\nimport { createDefaultPipeline } from \"./clientHelpers\";\nimport { ClientOptions, HttpResponse } from \"./common\";\nimport { RequestParameters } from \"./pathClientTypes\";\nimport { sendRequest } from \"./sendRequest\";\nimport { buildRequestUrl } from \"./urlHelpers\";\n\n/**\n * Type to use with pathUnchecked, overrides the body type to any to allow flexibility\n */\nexport type PathUncheckedResponse = HttpResponse & { body: any };\n\n/**\n * Shape of a Rest Level Client\n */\nexport interface Client {\n  /**\n   * The pipeline used by this client to make requests\n   */\n  pipeline: Pipeline;\n  /**\n   * This method will be used to send request that would check the path to provide\n   * strong types\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  path: Function;\n  /**\n   * This method allows arbitrary paths and doesn't provide strong types\n   */\n  pathUnchecked: (\n    path: string,\n    ...args: Array<any>\n  ) => {\n    get: (options?: RequestParameters) => Promise<PathUncheckedResponse>;\n    post: (options?: RequestParameters) => Promise<PathUncheckedResponse>;\n    put: (options?: RequestParameters) => Promise<PathUncheckedResponse>;\n    patch: (options?: RequestParameters) => Promise<PathUncheckedResponse>;\n    delete: (options?: RequestParameters) => Promise<PathUncheckedResponse>;\n    head: (options?: RequestParameters) => Promise<PathUncheckedResponse>;\n    options: (options?: RequestParameters) => Promise<PathUncheckedResponse>;\n    trace: (options?: RequestParameters) => Promise<PathUncheckedResponse>;\n  };\n}\n\n/**\n * Creates a client with a default pipeline\n * @param baseUrl - Base endpoint for the client\n * @param options - Client options\n */\nexport function getClient(baseUrl: string, options?: PipelineOptions): Client;\n/**\n * Creates a client with a default pipeline\n * @param baseUrl - Base endpoint for the client\n * @param credentials - Credentials to authenticate the requests\n * @param options - Client options\n */\nexport function getClient(\n  baseUrl: string,\n  credentials?: TokenCredential | KeyCredential,\n  options?: ClientOptions\n): Client;\nexport function getClient(\n  baseUrl: string,\n  credentialsOrPipelineOptions?: (TokenCredential | KeyCredential) | ClientOptions,\n  clientOptions: ClientOptions = {}\n): Client {\n  let credentials: TokenCredential | KeyCredential | undefined;\n\n  if (credentialsOrPipelineOptions) {\n    if (isCredential(credentialsOrPipelineOptions)) {\n      credentials = credentialsOrPipelineOptions;\n    } else {\n      clientOptions = credentialsOrPipelineOptions ?? {};\n    }\n  }\n\n  const pipeline = createDefaultPipeline(baseUrl, credentials, clientOptions);\n  const client = (path: string, ...args: Array<any>) => {\n    return {\n      get: (options: RequestParameters = {}): Promise<HttpResponse> => {\n        return buildSendRequest(\"GET\", clientOptions, baseUrl, path, pipeline, options, args);\n      },\n      post: (options: RequestParameters = {}): Promise<HttpResponse> => {\n        return buildSendRequest(\"POST\", clientOptions, baseUrl, path, pipeline, options, args);\n      },\n      put: (options: RequestParameters = {}): Promise<HttpResponse> => {\n        return buildSendRequest(\"PUT\", clientOptions, baseUrl, path, pipeline, options, args);\n      },\n      patch: (options: RequestParameters = {}): Promise<HttpResponse> => {\n        return buildSendRequest(\"PATCH\", clientOptions, baseUrl, path, pipeline, options, args);\n      },\n      delete: (options: RequestParameters = {}): Promise<HttpResponse> => {\n        return buildSendRequest(\"DELETE\", clientOptions, baseUrl, path, pipeline, options, args);\n      },\n      head: (options: RequestParameters = {}): Promise<HttpResponse> => {\n        return buildSendRequest(\"HEAD\", clientOptions, baseUrl, path, pipeline, options, args);\n      },\n      options: (options: RequestParameters = {}): Promise<HttpResponse> => {\n        return buildSendRequest(\"OPTIONS\", clientOptions, baseUrl, path, pipeline, options, args);\n      },\n      trace: (options: RequestParameters = {}): Promise<HttpResponse> => {\n        return buildSendRequest(\"TRACE\", clientOptions, baseUrl, path, pipeline, options, args);\n      },\n    };\n  };\n\n  return {\n    path: client,\n    pathUnchecked: client,\n    pipeline,\n  };\n}\n\nfunction buildSendRequest(\n  method: HttpMethods,\n  clientOptions: ClientOptions,\n  baseUrl: string,\n  path: string,\n  pipeline: Pipeline,\n  requestOptions: RequestParameters = {},\n  args: string[] = []\n): Promise<HttpResponse> {\n  // If the client has an api-version and the request doesn't specify one, inject the one in the client options\n  if (!requestOptions.queryParameters?.[\"api-version\"] && clientOptions.apiVersion) {\n    if (!requestOptions.queryParameters) {\n      requestOptions.queryParameters = {};\n    }\n\n    requestOptions.queryParameters[\"api-version\"] = clientOptions.apiVersion;\n  }\n\n  const url = buildRequestUrl(baseUrl, path, args, requestOptions);\n  return sendRequest(method, url, pipeline, requestOptions);\n}\n\nfunction isCredential(\n  param: (TokenCredential | KeyCredential) | PipelineOptions\n): param is TokenCredential | KeyCredential {\n  if (\n    (param as KeyCredential).key !== undefined ||\n    isTokenCredential(param) ||\n    isCertificateCredential(param)\n  ) {\n    return true;\n  }\n\n  return false;\n}\n"]}