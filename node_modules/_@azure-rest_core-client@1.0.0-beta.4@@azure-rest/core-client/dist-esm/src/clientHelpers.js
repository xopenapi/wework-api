// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { createPipelineFromOptions, bearerTokenAuthenticationPolicy, createDefaultHttpClient, } from "@azure/core-rest-pipeline";
import { isTokenCredential } from "@azure/core-auth";
import { keyCredentialAuthenticationPolicy } from "./keyCredentialAuthenticationPolicy";
let cachedHttpClient;
/**
 * Creates a default rest pipeline to re-use accross Rest Level Clients
 */
export function createDefaultPipeline(baseUrl, credential, options = {}) {
    var _a, _b, _c, _d;
    const pipeline = createPipelineFromOptions(options);
    pipeline.removePolicy({ name: "exponentialRetryPolicy" });
    if (credential) {
        if (isTokenCredential(credential)) {
            const tokenPolicy = bearerTokenAuthenticationPolicy({
                credential,
                scopes: (_b = (_a = options.credentials) === null || _a === void 0 ? void 0 : _a.scopes) !== null && _b !== void 0 ? _b : `${baseUrl}/.default`,
            });
            pipeline.addPolicy(tokenPolicy);
        }
        else if (isKeyCredential(credential)) {
            if (!((_c = options.credentials) === null || _c === void 0 ? void 0 : _c.apiKeyHeaderName)) {
                throw new Error(`Missing API Key Header Name`);
            }
            const keyPolicy = keyCredentialAuthenticationPolicy(credential, (_d = options.credentials) === null || _d === void 0 ? void 0 : _d.apiKeyHeaderName);
            pipeline.addPolicy(keyPolicy);
        }
    }
    return pipeline;
}
function isKeyCredential(credential) {
    return credential.key !== undefined;
}
export function getCachedDefaultHttpsClient() {
    if (!cachedHttpClient) {
        cachedHttpClient = createDefaultHttpClient();
    }
    return cachedHttpClient;
}
//# sourceMappingURL=clientHelpers.js.map