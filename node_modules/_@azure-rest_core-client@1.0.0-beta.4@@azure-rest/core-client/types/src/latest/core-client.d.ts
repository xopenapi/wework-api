/**
 * Azure Rest Core Client library for JavaScript
 * @packageDocumentation
 */

import { KeyCredential } from '@azure/core-auth';
import { Pipeline } from '@azure/core-rest-pipeline';
import { PipelineOptions } from '@azure/core-rest-pipeline';
import { PipelineRequest } from '@azure/core-rest-pipeline';
import { RawHttpHeaders } from '@azure/core-rest-pipeline';
import { TokenCredential } from '@azure/core-auth';

/**
 * Represents a certificate credential for authentication.
 */
export declare interface CertificateCredential {
    /**
     * Certificate used to authenticate
     */
    cert: string;
    /**
     * Certificate key
     */
    certKey: string;
}

/**
 * Shape of a Rest Level Client
 */
export declare interface Client {
    /**
     * The pipeline used by this client to make requests
     */
    pipeline: Pipeline;
    /**
     * This method will be used to send request that would check the path to provide
     * strong types
     */
    path: Function;
    /**
     * This method allows arbitrary paths and doesn't provide strong types
     */
    pathUnchecked: (path: string, ...args: Array<any>) => {
        get: (options?: RequestParameters) => Promise<PathUncheckedResponse>;
        post: (options?: RequestParameters) => Promise<PathUncheckedResponse>;
        put: (options?: RequestParameters) => Promise<PathUncheckedResponse>;
        patch: (options?: RequestParameters) => Promise<PathUncheckedResponse>;
        delete: (options?: RequestParameters) => Promise<PathUncheckedResponse>;
        head: (options?: RequestParameters) => Promise<PathUncheckedResponse>;
        options: (options?: RequestParameters) => Promise<PathUncheckedResponse>;
        trace: (options?: RequestParameters) => Promise<PathUncheckedResponse>;
    };
}

/**
 * General options that a Rest Level Client can take
 */
export declare type ClientOptions = PipelineOptions & {
    /**
     * Credentials information
     */
    credentials?: {
        /**
         * Authentication scopes for AAD
         */
        scopes?: string[];
        /**
         * Heder name for Client Secret authentication
         */
        apiKeyHeaderName?: string;
    };
    /**
     * Base url for the client
     */
    baseUrl?: string;
    /**
     * Options for setting a custom apiVersion.
     */
    apiVersion?: string;
};

/**
 * Creates a default rest pipeline to re-use accross Rest Level Clients
 */
export declare function createDefaultPipeline(baseUrl: string, credential?: TokenCredential | KeyCredential, options?: ClientOptions): Pipeline;

/**
 * Creates a client with a default pipeline
 * @param baseUrl - Base endpoint for the client
 * @param options - Client options
 */
export declare function getClient(baseUrl: string, options?: PipelineOptions): Client;

/**
 * Creates a client with a default pipeline
 * @param baseUrl - Base endpoint for the client
 * @param credentials - Credentials to authenticate the requests
 * @param options - Client options
 */
export declare function getClient(baseUrl: string, credentials?: TokenCredential | KeyCredential, options?: ClientOptions): Client;

/**
 * Represents the shape of an HttpResponse
 */
export declare type HttpResponse = {
    /**
     * The request that generated this response.
     */
    request: PipelineRequest;
    /**
     * The HTTP response headers.
     */
    headers: RawHttpHeaders;
    /**
     * Parsed body
     */
    body: unknown;
    /**
     * The HTTP status code of the response.
     */
    status: string;
};

/**
 * Tests an object to determine whether it implements CertificateCredential.
 *
 * @param credential - The assumed CertificateCredential to be tested.
 */
export declare function isCertificateCredential(credential: unknown): credential is CertificateCredential;

/**
 * Type to use with pathUnchecked, overrides the body type to any to allow flexibility
 */
export declare type PathUncheckedResponse = HttpResponse & {
    body: any;
};

/**
 * Shape of the default request parameters, this may be overriden by the specific
 * request types to provide strong types
 */
export declare type RequestParameters = {
    /**
     * Headers to send along with the request
     */
    headers?: RawHttpHeaders;
    /**
     * Sets the accept header to send to the service
     * defaults to 'application/json'
     */
    accept?: string;
    /**
     * Body to send with the request
     */
    body?: unknown;
    /**
     * Query parameters to send with the request
     */
    queryParameters?: Record<string, unknown>;
    /**
     * Set an explicit content-type to send with the request
     */
    contentType?: string;
    /** Set to true if the request is sent over HTTP instead of HTTPS */
    allowInsecureConnection?: boolean;
};

/**
 * Helper type used to detect parameters in a path template
 * keys surounded by \{\} will be considered a path parameter
 */
export declare type RouteParams<TRoute extends string> = TRoute extends `{${infer _Param}}/${infer Tail}` ? [pathParam: string, ...pathParams: RouteParams<Tail>] : TRoute extends `{${infer _Param}}` ? [pathParam: string] : TRoute extends `${infer _Prefix}:${infer Tail}` ? RouteParams<`{${Tail}}`> : [];

export { }
