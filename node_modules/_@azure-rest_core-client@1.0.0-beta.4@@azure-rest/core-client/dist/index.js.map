{"version":3,"file":"index.js","sources":["../src/keyCredentialAuthenticationPolicy.ts","../src/clientHelpers.ts","../src/typeGuards.ts","../src/certificateCredential.ts","../src/sendRequest.ts","../src/urlHelpers.ts","../src/getClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { KeyCredential } from \"@azure/core-auth\";\nimport {\n  PipelinePolicy,\n  PipelineRequest,\n  PipelineResponse,\n  SendRequest,\n} from \"@azure/core-rest-pipeline\";\n\n/**\n * The programmatic identifier of the bearerTokenAuthenticationPolicy.\n */\nexport const keyCredentialAuthenticationPolicyName = \"keyCredentialAuthenticationPolicy\";\n\nexport function keyCredentialAuthenticationPolicy(\n  credential: KeyCredential,\n  apiKeyHeaderName: string\n): PipelinePolicy {\n  return {\n    name: keyCredentialAuthenticationPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      request.headers.set(apiKeyHeaderName, credential.key);\n      return next(request);\n    },\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  createPipelineFromOptions,\n  bearerTokenAuthenticationPolicy,\n  Pipeline,\n  createDefaultHttpClient,\n  HttpClient,\n} from \"@azure/core-rest-pipeline\";\nimport { TokenCredential, KeyCredential, isTokenCredential } from \"@azure/core-auth\";\nimport { ClientOptions } from \"./common\";\nimport { keyCredentialAuthenticationPolicy } from \"./keyCredentialAuthenticationPolicy\";\n\nlet cachedHttpClient: HttpClient | undefined;\n\n/**\n * Creates a default rest pipeline to re-use accross Rest Level Clients\n */\nexport function createDefaultPipeline(\n  baseUrl: string,\n  credential?: TokenCredential | KeyCredential,\n  options: ClientOptions = {}\n): Pipeline {\n  const pipeline = createPipelineFromOptions(options);\n  pipeline.removePolicy({ name: \"exponentialRetryPolicy\" });\n\n  if (credential) {\n    if (isTokenCredential(credential)) {\n      const tokenPolicy = bearerTokenAuthenticationPolicy({\n        credential,\n        scopes: options.credentials?.scopes ?? `${baseUrl}/.default`,\n      });\n      pipeline.addPolicy(tokenPolicy);\n    } else if (isKeyCredential(credential)) {\n      if (!options.credentials?.apiKeyHeaderName) {\n        throw new Error(`Missing API Key Header Name`);\n      }\n      const keyPolicy = keyCredentialAuthenticationPolicy(\n        credential,\n        options.credentials?.apiKeyHeaderName\n      );\n      pipeline.addPolicy(keyPolicy);\n    }\n  }\n\n  return pipeline;\n}\n\nfunction isKeyCredential(credential: any): credential is KeyCredential {\n  return (credential as KeyCredential).key !== undefined;\n}\n\nexport function getCachedDefaultHttpsClient(): HttpClient {\n  if (!cachedHttpClient) {\n    cachedHttpClient = createDefaultHttpClient();\n  }\n\n  return cachedHttpClient;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Helper TypeGuard that checks if something is defined or not.\n * @param thing - Anything\n * @internal\n */\nexport function isDefined<T>(thing: T | undefined | null): thing is T {\n  return typeof thing !== \"undefined\" && thing !== null;\n}\n\n/**\n * Helper TypeGuard that checks if the input is an object with the specified properties.\n * @param thing - Anything.\n * @param properties - The name of the properties that should appear in the object.\n * @internal\n */\nexport function isObjectWithProperties<Thing extends unknown, PropertyName extends string>(\n  thing: Thing,\n  properties: PropertyName[]\n): thing is Thing & Record<PropertyName, unknown> {\n  if (!isDefined(thing) || typeof thing !== \"object\") {\n    return false;\n  }\n\n  for (const property of properties) {\n    if (!objectHasProperty(thing, property)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Helper TypeGuard that checks if the input is an object with the specified property.\n * @param thing - Any object.\n * @param property - The name of the property that should appear in the object.\n * @internal\n */\nfunction objectHasProperty<Thing extends unknown, PropertyName extends string>(\n  thing: Thing,\n  property: PropertyName\n): thing is Thing & Record<PropertyName, unknown> {\n  return typeof thing === \"object\" && property in (thing as Record<string, unknown>);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isObjectWithProperties } from \"./typeGuards\";\n\n/**\n * Represents a certificate credential for authentication.\n */\nexport interface CertificateCredential {\n  /**\n   * Certificate used to authenticate\n   */\n  cert: string;\n  /**\n   * Certificate key\n   */\n  certKey: string;\n}\n\n/**\n * Tests an object to determine whether it implements CertificateCredential.\n *\n * @param credential - The assumed CertificateCredential to be tested.\n */\nexport function isCertificateCredential(credential: unknown): credential is CertificateCredential {\n  return (\n    isObjectWithProperties(credential, [\"certKey\", \"cert\"]) &&\n    typeof credential.cert === \"string\" &&\n    typeof credential.certKey === \"string\"\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  createHttpHeaders,\n  createPipelineRequest,\n  HttpMethods,\n  Pipeline,\n  RawHttpHeaders,\n} from \"@azure/core-rest-pipeline\";\nimport { getCachedDefaultHttpsClient } from \"./clientHelpers\";\nimport { RequestParameters } from \"./pathClientTypes\";\nimport { HttpResponse } from \"./common\";\n\n/**\n * Helper function to send request used by the client\n * @param method - method to use to send the request\n * @param url - url to send the request to\n * @param pipeline - pipeline with the policies to run when sending the request\n * @param options - request options\n * @returns returns and HttpResponse\n */\nexport async function sendRequest(\n  method: HttpMethods,\n  url: string,\n  pipeline: Pipeline,\n  options: RequestParameters = {}\n): Promise<HttpResponse> {\n  const httpClient = getCachedDefaultHttpsClient();\n\n  const body = options.body !== undefined ? JSON.stringify(options.body) : undefined;\n\n  const headers = createHttpHeaders({\n    accept: options.accept ?? \"application/json\",\n    ...(body !== undefined && {\n      \"content-type\": options.contentType ?? getContentType(options.body),\n    }),\n    ...(options.headers ? options.headers : {}),\n  });\n\n  const request = createPipelineRequest({\n    url,\n    method,\n    body,\n    headers,\n    allowInsecureConnection: options.allowInsecureConnection,\n  });\n\n  const result = await pipeline.sendRequest(httpClient, request);\n  const rawHeaders: RawHttpHeaders = result.headers.toJSON();\n\n  let parsedBody = undefined;\n\n  try {\n    parsedBody = result.bodyAsText ? JSON.parse(result.bodyAsText) : undefined;\n  } catch {\n    parsedBody = undefined;\n  }\n\n  return {\n    request,\n    headers: rawHeaders,\n    status: `${result.status}`,\n    body: parsedBody,\n  };\n}\n\n/**\n * Function to determine the content-type of a body\n * this is used if an explicit content-type is not provided\n * @param body - body in the request\n * @returns returns the content-type\n */\nfunction getContentType(body: any): string {\n  if (ArrayBuffer.isView(body)) {\n    return \"application/octet-stream\";\n  }\n\n  // By default return json\n  return \"application/json; charset=UTF-8\";\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { RequestParameters } from \"./pathClientTypes\";\nimport { URL } from \"./url\";\n\n/**\n * Builds the request url, filling in query and path parameters\n * @param baseUrl - base url which can be a template url\n * @param routePath - path to append to the baseUrl\n * @param pathParameters - values of the path parameters\n * @param options - request parameters including query parameters\n * @returns a full url with path and query parameters\n */\nexport function buildRequestUrl(\n  baseUrl: string,\n  routePath: string,\n  pathParameters: string[],\n  options: RequestParameters = {}\n): string {\n  let path = routePath;\n\n  if (path.startsWith(\"https://\") || path.startsWith(\"http://\")) {\n    return path;\n  }\n\n  for (const pathParam of pathParameters) {\n    path = path.replace(/{([^/]+)}/, pathParam);\n  }\n\n  const url = new URL(`${baseUrl}/${path}`);\n\n  if (options.queryParameters) {\n    const queryParams = options.queryParameters;\n    for (const key of Object.keys(queryParams)) {\n      const param = queryParams[key] as any;\n      if (!param.toString || typeof param.toString !== \"function\") {\n        throw new Error(`Query parameters must be able to be represented as string, ${key} can't`);\n      }\n      const value = param.toISOString !== undefined ? param.toISOString() : param.toString();\n      url.searchParams.append(key, value);\n    }\n  }\n\n  return (\n    url\n      .toString()\n      // Remove double forward slashes\n      .replace(/([^:]\\/)\\/+/g, \"$1\")\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isTokenCredential, KeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport { isCertificateCredential } from \"./certificateCredential\";\nimport { HttpMethods, Pipeline, PipelineOptions } from \"@azure/core-rest-pipeline\";\nimport { createDefaultPipeline } from \"./clientHelpers\";\nimport { ClientOptions, HttpResponse } from \"./common\";\nimport { RequestParameters } from \"./pathClientTypes\";\nimport { sendRequest } from \"./sendRequest\";\nimport { buildRequestUrl } from \"./urlHelpers\";\n\n/**\n * Type to use with pathUnchecked, overrides the body type to any to allow flexibility\n */\nexport type PathUncheckedResponse = HttpResponse & { body: any };\n\n/**\n * Shape of a Rest Level Client\n */\nexport interface Client {\n  /**\n   * The pipeline used by this client to make requests\n   */\n  pipeline: Pipeline;\n  /**\n   * This method will be used to send request that would check the path to provide\n   * strong types\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  path: Function;\n  /**\n   * This method allows arbitrary paths and doesn't provide strong types\n   */\n  pathUnchecked: (\n    path: string,\n    ...args: Array<any>\n  ) => {\n    get: (options?: RequestParameters) => Promise<PathUncheckedResponse>;\n    post: (options?: RequestParameters) => Promise<PathUncheckedResponse>;\n    put: (options?: RequestParameters) => Promise<PathUncheckedResponse>;\n    patch: (options?: RequestParameters) => Promise<PathUncheckedResponse>;\n    delete: (options?: RequestParameters) => Promise<PathUncheckedResponse>;\n    head: (options?: RequestParameters) => Promise<PathUncheckedResponse>;\n    options: (options?: RequestParameters) => Promise<PathUncheckedResponse>;\n    trace: (options?: RequestParameters) => Promise<PathUncheckedResponse>;\n  };\n}\n\n/**\n * Creates a client with a default pipeline\n * @param baseUrl - Base endpoint for the client\n * @param options - Client options\n */\nexport function getClient(baseUrl: string, options?: PipelineOptions): Client;\n/**\n * Creates a client with a default pipeline\n * @param baseUrl - Base endpoint for the client\n * @param credentials - Credentials to authenticate the requests\n * @param options - Client options\n */\nexport function getClient(\n  baseUrl: string,\n  credentials?: TokenCredential | KeyCredential,\n  options?: ClientOptions\n): Client;\nexport function getClient(\n  baseUrl: string,\n  credentialsOrPipelineOptions?: (TokenCredential | KeyCredential) | ClientOptions,\n  clientOptions: ClientOptions = {}\n): Client {\n  let credentials: TokenCredential | KeyCredential | undefined;\n\n  if (credentialsOrPipelineOptions) {\n    if (isCredential(credentialsOrPipelineOptions)) {\n      credentials = credentialsOrPipelineOptions;\n    } else {\n      clientOptions = credentialsOrPipelineOptions ?? {};\n    }\n  }\n\n  const pipeline = createDefaultPipeline(baseUrl, credentials, clientOptions);\n  const client = (path: string, ...args: Array<any>) => {\n    return {\n      get: (options: RequestParameters = {}): Promise<HttpResponse> => {\n        return buildSendRequest(\"GET\", clientOptions, baseUrl, path, pipeline, options, args);\n      },\n      post: (options: RequestParameters = {}): Promise<HttpResponse> => {\n        return buildSendRequest(\"POST\", clientOptions, baseUrl, path, pipeline, options, args);\n      },\n      put: (options: RequestParameters = {}): Promise<HttpResponse> => {\n        return buildSendRequest(\"PUT\", clientOptions, baseUrl, path, pipeline, options, args);\n      },\n      patch: (options: RequestParameters = {}): Promise<HttpResponse> => {\n        return buildSendRequest(\"PATCH\", clientOptions, baseUrl, path, pipeline, options, args);\n      },\n      delete: (options: RequestParameters = {}): Promise<HttpResponse> => {\n        return buildSendRequest(\"DELETE\", clientOptions, baseUrl, path, pipeline, options, args);\n      },\n      head: (options: RequestParameters = {}): Promise<HttpResponse> => {\n        return buildSendRequest(\"HEAD\", clientOptions, baseUrl, path, pipeline, options, args);\n      },\n      options: (options: RequestParameters = {}): Promise<HttpResponse> => {\n        return buildSendRequest(\"OPTIONS\", clientOptions, baseUrl, path, pipeline, options, args);\n      },\n      trace: (options: RequestParameters = {}): Promise<HttpResponse> => {\n        return buildSendRequest(\"TRACE\", clientOptions, baseUrl, path, pipeline, options, args);\n      },\n    };\n  };\n\n  return {\n    path: client,\n    pathUnchecked: client,\n    pipeline,\n  };\n}\n\nfunction buildSendRequest(\n  method: HttpMethods,\n  clientOptions: ClientOptions,\n  baseUrl: string,\n  path: string,\n  pipeline: Pipeline,\n  requestOptions: RequestParameters = {},\n  args: string[] = []\n): Promise<HttpResponse> {\n  // If the client has an api-version and the request doesn't specify one, inject the one in the client options\n  if (!requestOptions.queryParameters?.[\"api-version\"] && clientOptions.apiVersion) {\n    if (!requestOptions.queryParameters) {\n      requestOptions.queryParameters = {};\n    }\n\n    requestOptions.queryParameters[\"api-version\"] = clientOptions.apiVersion;\n  }\n\n  const url = buildRequestUrl(baseUrl, path, args, requestOptions);\n  return sendRequest(method, url, pipeline, requestOptions);\n}\n\nfunction isCredential(\n  param: (TokenCredential | KeyCredential) | PipelineOptions\n): param is TokenCredential | KeyCredential {\n  if (\n    (param as KeyCredential).key !== undefined ||\n    isTokenCredential(param) ||\n    isCertificateCredential(param)\n  ) {\n    return true;\n  }\n\n  return false;\n}\n"],"names":["createPipelineFromOptions","isTokenCredential","bearerTokenAuthenticationPolicy","createDefaultHttpClient","createHttpHeaders","createPipelineRequest","url","URL"],"mappings":"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"}