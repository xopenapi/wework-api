// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __awaiter } from "tslib";
import { delay } from "../util/helpers";
/**
 * The programmatic identifier of the throttlingRetryPolicy.
 */
export const throttlingRetryPolicyName = "throttlingRetryPolicy";
/**
 * A policy that retries when the server sends a 429 response with a Retry-After header.
 *
 * To learn more, please refer to
 * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,
 * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and
 * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors
 */
export function throttlingRetryPolicy() {
    return {
        name: throttlingRetryPolicyName,
        sendRequest(request, next) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield next(request);
                if (response.status !== 429) {
                    return response;
                }
                const retryAfterHeader = response.headers.get("Retry-After");
                if (retryAfterHeader) {
                    const delayInMs = parseRetryAfterHeader(retryAfterHeader);
                    if (delayInMs) {
                        yield delay(delayInMs);
                        return next(request);
                    }
                }
                return response;
            });
        }
    };
}
/**
 * Returns the number of milliseconds to wait based on a Retry-After header value.
 * Returns undefined if there is no valid value.
 * @param headerValue - An HTTP Retry-After header value.
 */
function parseRetryAfterHeader(headerValue) {
    try {
        const retryAfterInSeconds = Number(headerValue);
        if (!Number.isNaN(retryAfterInSeconds)) {
            return retryAfterInSeconds * 1000;
        }
        else {
            // It might be formatted as a date instead of a number of seconds
            const now = Date.now();
            const date = Date.parse(headerValue);
            const diff = date - now;
            return Number.isNaN(diff) ? undefined : diff;
        }
    }
    catch (e) {
        return undefined;
    }
}
//# sourceMappingURL=throttlingRetryPolicy.js.map