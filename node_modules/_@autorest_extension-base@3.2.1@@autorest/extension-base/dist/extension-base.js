"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoRestExtension = void 0;
const vscode_jsonrpc_1 = require("vscode-jsonrpc");
const types_1 = require("./types");
const path_1 = require("path");
var IAutoRestPluginTargetTypes;
(function (IAutoRestPluginTargetTypes) {
    IAutoRestPluginTargetTypes.GetPluginNames = new vscode_jsonrpc_1.RequestType0("GetPluginNames");
    IAutoRestPluginTargetTypes.Process = new vscode_jsonrpc_1.RequestType2("Process");
})(IAutoRestPluginTargetTypes || (IAutoRestPluginTargetTypes = {}));
var IAutoRestPluginInitiatorTypes;
(function (IAutoRestPluginInitiatorTypes) {
    IAutoRestPluginInitiatorTypes.ReadFile = new vscode_jsonrpc_1.RequestType2("ReadFile");
    IAutoRestPluginInitiatorTypes.GetValue = new vscode_jsonrpc_1.RequestType2("GetValue");
    IAutoRestPluginInitiatorTypes.ListInputs = new vscode_jsonrpc_1.RequestType2("ListInputs");
    IAutoRestPluginInitiatorTypes.ProtectFiles = new vscode_jsonrpc_1.NotificationType2("ProtectFiles");
    IAutoRestPluginInitiatorTypes.WriteFile = new vscode_jsonrpc_1.NotificationType4("WriteFile");
    IAutoRestPluginInitiatorTypes.Message = new vscode_jsonrpc_1.NotificationType2("Message");
})(IAutoRestPluginInitiatorTypes || (IAutoRestPluginInitiatorTypes = {}));
class AutoRestExtension {
    constructor() {
        this.plugins = {};
    }
    Add(name, handler) {
        this.plugins[name] = handler;
    }
    async Run(input = process.stdin, output = process.stdout) {
        // connection setup
        const channel = vscode_jsonrpc_1.createMessageConnection(input, output, {
            error(message) {
                // eslint-disable-next-line no-console
                console.error("error: ", message);
            },
            info(message) {
                // eslint-disable-next-line no-console
                console.error("info: ", message);
            },
            log(message) {
                // eslint-disable-next-line no-console
                console.error("log: ", message);
            },
            warn(message) {
                // eslint-disable-next-line no-console
                console.error("warn: ", message);
            },
        });
        channel.onRequest(IAutoRestPluginTargetTypes.GetPluginNames, async () => Object.keys(this.plugins));
        channel.onRequest(IAutoRestPluginTargetTypes.Process, async (pluginName, sessionId) => {
            try {
                const handler = this.plugins[pluginName];
                if (!handler) {
                    throw new Error(`Plugin host could not find requested plugin '${pluginName}'.`);
                }
                await handler({
                    async ProtectFiles(path) {
                        channel.sendNotification(IAutoRestPluginInitiatorTypes.ProtectFiles, sessionId, path);
                    },
                    UpdateConfigurationFile(filename, content) {
                        channel.sendNotification(IAutoRestPluginInitiatorTypes.Message, sessionId, {
                            Channel: types_1.Channel.Configuration,
                            Key: [filename],
                            Text: content,
                        });
                    },
                    async GetConfigurationFile(filename) {
                        const configurations = await channel.sendRequest(IAutoRestPluginInitiatorTypes.GetValue, sessionId, "configurationFiles");
                        const filenames = Object.getOwnPropertyNames(configurations);
                        if (filenames.length > 0) {
                            const basePath = path_1.dirname(filenames[0]);
                            for (const configFile of filenames) {
                                if (configFile.startsWith(basePath) && filename === path_1.basename(configFile)) {
                                    return configurations[configFile];
                                }
                            }
                        }
                        return "";
                    },
                    async ReadFile(filename) {
                        return await channel.sendRequest(IAutoRestPluginInitiatorTypes.ReadFile, sessionId, filename);
                    },
                    async GetValue(key) {
                        return await channel.sendRequest(IAutoRestPluginInitiatorTypes.GetValue, sessionId, key);
                    },
                    async ListInputs(artifactType) {
                        return await channel.sendRequest(IAutoRestPluginInitiatorTypes.ListInputs, sessionId, artifactType);
                    },
                    WriteFile(filename, content, sourceMap, artifactType) {
                        if (artifactType) {
                            channel.sendNotification(IAutoRestPluginInitiatorTypes.Message, sessionId, {
                                Channel: types_1.Channel.File,
                                Details: {
                                    content: content,
                                    type: artifactType,
                                    uri: filename,
                                    sourceMap: sourceMap,
                                },
                                Text: content,
                                Key: [artifactType, filename],
                            });
                        }
                        else {
                            channel.sendNotification(IAutoRestPluginInitiatorTypes.WriteFile, sessionId, filename, content, sourceMap);
                        }
                    },
                    Message(message) {
                        channel.sendNotification(IAutoRestPluginInitiatorTypes.Message, sessionId, message);
                    },
                });
                return true;
            }
            catch (e) {
                if (await channel.sendRequest(IAutoRestPluginInitiatorTypes.GetValue, sessionId, "debug")) {
                    // eslint-disable-next-line no-console
                    console.error(`PLUGIN FAILURE: ${e.message}, ${e.stack}, ${JSON.stringify(e, null, 2)}`);
                }
                channel.sendNotification(IAutoRestPluginInitiatorTypes.Message, sessionId, {
                    Channel: "fatal",
                    Text: "" + e,
                    Details: e,
                });
                return false;
            }
        });
        // activate
        channel.listen();
    }
}
exports.AutoRestExtension = AutoRestExtension;
//# sourceMappingURL=extension-base.js.map