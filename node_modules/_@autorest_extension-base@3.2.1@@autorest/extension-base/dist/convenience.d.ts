import { Host } from "./exports";
import { Channel, Message, Mapping, RawSourceMap } from "./types";
import { Schema } from "js-yaml";
export declare class Session<TInputModel> {
    readonly service: Host;
    private context;
    private _debug;
    private _verbose;
    model: TInputModel;
    filename: string;
    readFile(filename: string): Promise<string>;
    getValue<V>(key: string, defaultValue?: V): Promise<V>;
    setValue<V>(key: string, value: V): Promise<void>;
    listInputs(artifactType?: string | undefined): Promise<Array<string>>;
    protectFiles(path: string): Promise<void>;
    writeFile(filename: string, content: string, sourceMap?: Array<Mapping> | RawSourceMap | undefined, artifactType?: string | undefined): void;
    message(message: Message): void;
    updateConfigurationFile(filename: string, content: string): void;
    getConfigurationFile(filename: string): Promise<string>;
    protected errorCount: number;
    protected static getModel<T>(service: Host): Promise<{
        filename: string;
        model: T;
    }>;
    cache: any[];
    replacer(key: string, value: any): any;
    resolveVariables(input: string): Promise<string>;
    checkpoint(): void;
    protected msg(channel: Channel, message: string, key: Array<string>, objectOrPath?: string | Object, details?: any): void;
    warning(message: string, key: Array<string>, objectOrPath?: string | Object, details?: any): void;
    hint(message: string, key: Array<string>, objectOrPath?: string | Object, details?: any): void;
    error(message: string, key: Array<string>, objectOrPath?: string | Object, details?: any): void;
    fatal(message: string, key: Array<string>, objectOrPath?: string | Object, details?: any): void;
    protected output(channel: Channel, message: string, details?: any): void;
    debug(message: string, details: any): void;
    verbose(message: string, details: any): void;
    log(message: string, details: any): void;
}
export declare function startSession<TInputModel>(service: Host, project?: any, schema?: Schema, artifactType?: string): Promise<Session<TInputModel>>;
//# sourceMappingURL=convenience.d.ts.map