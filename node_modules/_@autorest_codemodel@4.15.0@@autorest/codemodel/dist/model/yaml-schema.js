"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.codeModelSchema = void 0;
const js_yaml_1 = require("js-yaml");
const code_model_1 = require("./common/code-model");
const metadata_1 = require("./common/metadata");
const parameter_1 = require("./common/parameter");
const property_1 = require("./common/property");
const value_1 = require("./common/value");
const operation_1 = require("./common/operation");
const choice_1 = require("./common/schemas/choice");
const aspect_1 = require("./common/aspect");
const schemas_1 = require("./common/schemas");
const external_documentation_1 = require("./common/external-documentation");
const info_1 = require("./common/info");
const languages_1 = require("./common/languages");
const protocols_1 = require("./common/protocols");
const api_version_1 = require("./common/api-version");
const http_1 = require("./http/http");
const response_1 = require("./common/response");
const object_1 = require("./common/schemas/object");
const flag_1 = require("./common/schemas/flag");
const number_1 = require("./common/schemas/number");
const string_1 = require("./common/schemas/string");
const array_1 = require("./common/schemas/array");
const constant_1 = require("./common/schemas/constant");
const primitive_1 = require("./common/schemas/primitive");
const time_1 = require("./common/schemas/time");
const any_1 = require("./common/schemas/any");
const dictionary_1 = require("./common/schemas/dictionary");
const relationship_1 = require("./common/schemas/relationship");
const binary_1 = require("./common/schemas/binary");
const conditional_1 = require("./common/schemas/conditional");
const security_1 = require("./common/security");
function TypeInfo(type) {
    return new js_yaml_1.Type(`!${type.name}`, {
        kind: "mapping",
        instanceOf: type,
        construct: (i) => Object.setPrototypeOf(i, type.prototype),
    });
}
exports.codeModelSchema = js_yaml_1.DEFAULT_SCHEMA.extend([
    TypeInfo(security_1.Security),
    TypeInfo(http_1.HttpModel),
    TypeInfo(http_1.HttpParameter),
    TypeInfo(http_1.HttpBinaryRequest),
    TypeInfo(http_1.HttpMultipartRequest),
    TypeInfo(http_1.HttpWithBodyRequest),
    TypeInfo(http_1.HttpRequest),
    TypeInfo(http_1.HttpBinaryResponse),
    TypeInfo(response_1.SchemaResponse),
    TypeInfo(http_1.HttpResponse),
    TypeInfo(http_1.HttpHeader),
    TypeInfo(response_1.BinaryResponse),
    TypeInfo(response_1.Response),
    TypeInfo(parameter_1.VirtualParameter),
    TypeInfo(parameter_1.Parameter),
    TypeInfo(object_1.GroupProperty),
    TypeInfo(property_1.Property),
    TypeInfo(value_1.Value),
    TypeInfo(operation_1.Operation),
    TypeInfo(object_1.GroupSchema),
    TypeInfo(flag_1.FlagSchema),
    TypeInfo(flag_1.FlagValue),
    TypeInfo(number_1.NumberSchema),
    TypeInfo(string_1.StringSchema),
    TypeInfo(array_1.ArraySchema),
    TypeInfo(object_1.ObjectSchema),
    TypeInfo(choice_1.ChoiceValue),
    TypeInfo(conditional_1.ConditionalValue),
    TypeInfo(constant_1.ConstantValue),
    new js_yaml_1.Type("!ChoiceSchema", {
        kind: "mapping",
        instanceOf: choice_1.ChoiceSchema,
        construct: (i) => Object.setPrototypeOf(i, choice_1.ChoiceSchema.prototype),
    }),
    new js_yaml_1.Type("!SealedChoiceSchema", {
        kind: "mapping",
        instanceOf: choice_1.SealedChoiceSchema,
        construct: (i) => Object.setPrototypeOf(i, choice_1.SealedChoiceSchema.prototype),
    }),
    new js_yaml_1.Type("!ConditionalSchema", {
        kind: "mapping",
        instanceOf: conditional_1.ConditionalSchema,
        construct: (i) => Object.setPrototypeOf(i, conditional_1.ConditionalSchema.prototype),
    }),
    new js_yaml_1.Type("!SealedConditionalSchema", {
        kind: "mapping",
        instanceOf: conditional_1.SealedConditionalSchema,
        construct: (i) => Object.setPrototypeOf(i, conditional_1.SealedConditionalSchema.prototype),
    }),
    TypeInfo(constant_1.ConstantSchema),
    TypeInfo(primitive_1.BooleanSchema),
    TypeInfo(string_1.ODataQuerySchema),
    TypeInfo(string_1.CredentialSchema),
    TypeInfo(string_1.UriSchema),
    TypeInfo(string_1.UuidSchema),
    TypeInfo(time_1.DurationSchema),
    TypeInfo(time_1.DateTimeSchema),
    TypeInfo(time_1.DateSchema),
    TypeInfo(time_1.TimeSchema),
    TypeInfo(primitive_1.CharSchema),
    TypeInfo(any_1.AnySchema),
    TypeInfo(any_1.AnyObjectSchema),
    TypeInfo(array_1.ByteArraySchema),
    TypeInfo(time_1.UnixTimeSchema),
    TypeInfo(dictionary_1.DictionarySchema),
    TypeInfo(relationship_1.OrSchema),
    TypeInfo(relationship_1.XorSchema),
    TypeInfo(binary_1.BinarySchema),
    TypeInfo(js_yaml_1.Schema),
    TypeInfo(aspect_1.Aspect),
    TypeInfo(code_model_1.CodeModel),
    TypeInfo(operation_1.Request),
    TypeInfo(schemas_1.Schemas),
    TypeInfo(object_1.Discriminator),
    TypeInfo(object_1.Relations),
    TypeInfo(external_documentation_1.ExternalDocumentation),
    TypeInfo(info_1.Contact),
    TypeInfo(info_1.Info),
    TypeInfo(info_1.License),
    TypeInfo(operation_1.OperationGroup),
    TypeInfo(security_1.AADTokenSecurityScheme),
    TypeInfo(security_1.AzureKeySecurityScheme),
    TypeInfo(languages_1.Languages),
    TypeInfo(metadata_1.Language),
    TypeInfo(metadata_1.CSharpLanguage),
    TypeInfo(protocols_1.Protocols),
    TypeInfo(api_version_1.ApiVersion),
    TypeInfo(metadata_1.Metadata),
    // new Type('!set', { kind: 'mapping', instanceOf: Set, represent: (o: any) => [...o], construct: (i) => new Set(i) }),
]);
//# sourceMappingURL=yaml-schema.js.map