"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.processRequest = void 0;
const extension_base_1 = require("@autorest/extension-base");
const typescriptGenerator_1 = require("./typescriptGenerator");
const generateRestLevel_1 = require("./restLevelClient/generateRestLevel");
const autorestSession_1 = require("./autorestSession");
function processRequest(host) {
    return __awaiter(this, void 0, void 0, function* () {
        yield autorestSession_1.initializeSession(host);
        const session = autorestSession_1.getSession();
        const { restLevelClient } = autorestSession_1.getAutorestOptions();
        try {
            const start = Date.now();
            restLevelClient
                ? yield generateRestLevel_1.generateRestLevelClient()
                : yield typescriptGenerator_1.generateTypeScriptLibrary(session.model, host);
            session.log(`Autorest.Typescript took ${Date.now() - start}ms`, "");
        }
        catch (err) {
            session.error("An error was encountered while handling a request:", err);
            throw err;
        }
    });
}
exports.processRequest = processRequest;
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const pluginHost = new extension_base_1.AutoRestExtension();
        pluginHost.Add("typescript", processRequest);
        yield pluginHost.Run();
    });
}
main();
//# sourceMappingURL=main.js.map