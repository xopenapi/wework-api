"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateReadmeFile = void 0;
const hbs = require("handlebars");
const fs = require("fs");
const path = require("path");
const autorestSession_1 = require("../../autorestSession");
/**
 * Returns meta data information about the service, the package, and the client.
 * @param clientDetails - the client details
 * @param packageDetails - the package details
 * @returns inferred metadata about the service, the package, and the client
 */
function createMetadata(packageDetails, clientDetails, azureOutputDirectory, addCredentials, azureArm) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
    const azureHuh = packageDetails.scopeName === "azure";
    const repoURL = azureHuh
        ? "https://github.com/Azure/azure-sdk-for-js"
        : undefined;
    const relativePackageSourcePath = azureOutputDirectory;
    const packageSourceURL = relativePackageSourcePath &&
        repoURL &&
        `${repoURL}/tree/master/${relativePackageSourcePath}`;
    const names = relativePackageSourcePath === null || relativePackageSourcePath === void 0 ? void 0 : relativePackageSourcePath.split("/").slice(1);
    const packageParentDirectoryName = names === null || names === void 0 ? void 0 : names[0];
    const packageDirectoryName = names === null || names === void 0 ? void 0 : names[1];
    const clientClassName = clientDetails.name;
    const clientPackageName = packageDetails.name;
    const serviceTitle = (_b = (_a = clientDetails.info) === null || _a === void 0 ? void 0 : _a.title) !== null && _b !== void 0 ? _b : clientClassName;
    const simpleServiceName = 
    /**
     * It is a required convention in Azure swaggers for their titles to end with
     * "Client".
     */
    (_k = (_h = (_f = (_d = (_c = serviceTitle.match(/(.*) Client/)) === null || _c === void 0 ? void 0 : _c[1]) !== null && _d !== void 0 ? _d : 
    /** I noticed management-plane swaggers do not use spaces in their titles */
    (_e = serviceTitle.match(/(.*)Client/)) === null || _e === void 0 ? void 0 : _e[1]) !== null && _f !== void 0 ? _f : (_g = clientClassName.match(/(.*)Client/)) === null || _g === void 0 ? void 0 : _g[1]) !== null && _h !== void 0 ? _h : (_j = serviceTitle.match(/(.*) Service/)) === null || _j === void 0 ? void 0 : _j[1]) !== null && _k !== void 0 ? _k : "Service";
    const serviceName = azureHuh
        ? simpleServiceName.startsWith("Azure")
            ? simpleServiceName
            : `Azure ${simpleServiceName}`
        : simpleServiceName;
    const identityPackageURL = repoURL && `${repoURL}/tree/master/sdk/identity/identity`;
    return {
        serviceName: serviceName,
        clientPackageName: clientPackageName,
        clientClassName: clientClassName,
        azure: azureHuh,
        relativePackageSourcePath: relativePackageSourcePath,
        repoURL: repoURL,
        packageSourceURL: packageSourceURL,
        samplesURL: azureArm
            ? `https://github.com/Azure-Samples/azure-samples-js-management`
            : packageSourceURL && `${packageSourceURL}/samples`,
        impressionURL: azureHuh
            ? packageParentDirectoryName &&
                packageDirectoryName &&
                `https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2F${packageParentDirectoryName}%2F${packageDirectoryName}%2FREADME.png`
            : undefined,
        clientDescriptiveName: `${serviceName} client`,
        description: (_l = clientDetails.info) === null || _l === void 0 ? void 0 : _l.description,
        apiRefURL: azureHuh
            ? `https://docs.microsoft.com/javascript/api/${clientPackageName}`
            : undefined,
        packageNPMURL: `https://www.npmjs.com/package/${clientPackageName}`,
        contributingGuideURL: repoURL && `${repoURL}/blob/master/CONTRIBUTING.md`,
        projectName: azureHuh ? "Microsoft Azure SDK for JavaScript" : undefined,
        addCredentials,
        identityPackageURL
    };
}
function generateReadmeFile(clientDetails, project) {
    const { packageDetails, azureOutputDirectory, generateMetadata, addCredentials, azureArm } = autorestSession_1.getAutorestOptions();
    if (!generateMetadata) {
        return;
    }
    const metadata = createMetadata(packageDetails, clientDetails, azureOutputDirectory, addCredentials, azureArm);
    const file = fs.readFileSync(path.join(__dirname, "README.md.hbs"), {
        encoding: "utf-8"
    });
    const readmeFileContents = hbs.compile(file, { noEscape: true });
    project.createSourceFile("README.md", readmeFileContents(metadata), {
        overwrite: true
    });
}
exports.generateReadmeFile = generateReadmeFile;
//# sourceMappingURL=readmeFileGenerator.js.map