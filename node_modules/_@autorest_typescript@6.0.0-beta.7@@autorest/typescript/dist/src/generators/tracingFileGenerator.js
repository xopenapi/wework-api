"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateTracingFile = void 0;
const ts_morph_1 = require("ts-morph");
const nameUtils_1 = require("../utils/nameUtils");
const autorestSession_1 = require("../autorestSession");
function generateTracingFile(project) {
    const { tracingInfo, srcPath } = autorestSession_1.getAutorestOptions();
    if (tracingInfo === undefined) {
        return;
    }
    const file = project.createSourceFile(`${srcPath}/tracing.ts`, undefined, {
        overwrite: true
    });
    file.addImportDeclarations([
        {
            namedImports: ["createSpanFunction"],
            moduleSpecifier: "@azure/core-tracing"
        }
    ]);
    writeCreateSpanFunction(file);
    file.fixUnusedIdentifiers();
}
exports.generateTracingFile = generateTracingFile;
function writeCreateSpanFunction(file) {
    const { tracingInfo } = autorestSession_1.getAutorestOptions();
    if (!tracingInfo) {
        return;
    }
    file.addVariableStatement({
        isExported: true,
        declarationKind: ts_morph_1.VariableDeclarationKind.Const,
        declarations: [
            {
                name: "createSpan",
                initializer: `createSpanFunction({
        namespace: "${tracingInfo.namespace}",
        packagePrefix: "${tracingInfo.packagePrefix}"
      });`
            }
        ]
    });
}
function getTelemetryPackageName({ nameWithoutScope }) {
    return nameWithoutScope
        .split(/[-._ ]+/)
        .map(part => nameUtils_1.normalizeName(part, nameUtils_1.NameType.Class));
}
function getTelemetryNamespace(packageDetails) {
    const { scopeName } = packageDetails;
    return [
        ...(scopeName ? [scopeName] : []),
        ...getTelemetryPackageName(packageDetails)
    ]
        .map(part => nameUtils_1.normalizeName(part, nameUtils_1.NameType.Class))
        .join(".");
}
//# sourceMappingURL=tracingFileGenerator.js.map