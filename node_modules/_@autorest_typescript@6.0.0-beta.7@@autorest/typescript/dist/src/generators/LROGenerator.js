"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateLroFiles = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const autorestSession_1 = require("../autorestSession");
function generateLroFiles(clientDetails, project) {
    return __awaiter(this, void 0, void 0, function* () {
        const { srcPath, useCoreV2 } = autorestSession_1.getAutorestOptions();
        if (!hasAnyLro(clientDetails.operationGroups)) {
            return;
        }
        const LroClassFile = useCoreV2 ? "coreClientLro.ts" : "coreHttpLro.ts";
        const baseTargetPath = srcPath || "";
        const srcDir = path_1.join(__dirname, "..", "..", "..", "src");
        const lroDir = path_1.join(srcDir, "lro");
        const lroFiles = yield fs_1.promises.readdir(lroDir);
        for (let i = 0; i < lroFiles.length; i++) {
            const file = lroFiles[i];
            const filePath = path_1.join(lroDir, file);
            const fileContent = yield fs_1.promises.readFile(filePath, "utf-8");
            project.createSourceFile(path_1.join(baseTargetPath, "lro", file), fileContent, { overwrite: true });
        }
        const fileContent = yield fs_1.promises.readFile(path_1.join(srcDir, LroClassFile), "utf-8");
        project.createSourceFile(path_1.join(baseTargetPath, LroClassFile), fileContent, {
            overwrite: true
        });
    });
}
exports.generateLroFiles = generateLroFiles;
function hasAnyLro(operationGroups) {
    return operationGroups.some(og => og.operations.some(o => o.isLro));
}
//# sourceMappingURL=LROGenerator.js.map