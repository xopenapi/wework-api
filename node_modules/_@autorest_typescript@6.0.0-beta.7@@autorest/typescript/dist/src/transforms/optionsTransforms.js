"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformOptions = void 0;
const autorestSession_1 = require("../autorestSession");
function transformOptions(operationGroups) {
    return __awaiter(this, void 0, void 0, function* () {
        const mediaTypes = getMediaTypesStyles(operationGroups);
        const autorestOptions = autorestSession_1.getAutorestOptions();
        return Object.assign(Object.assign({}, autorestOptions), { 
            // CalculatedOptions
            mediaTypes, hasPaging: hasPagingOperations(operationGroups) });
    });
}
exports.transformOptions = transformOptions;
/**
 * Gets the MediaTypes based on the different mediaTypes found in a set of operation groups
 * @param operationGroups
 */
function getMediaTypesStyles(operationGroups) {
    return operationGroups.reduce((mediaTypes, operationGroup) => new Set([...mediaTypes, ...operationGroup.mediaTypes]), new Set());
}
function hasPagingOperations(operationGroups) {
    return operationGroups.some(og => og.operations.some(o => !!o.pagination));
}
//# sourceMappingURL=optionsTransforms.js.map