"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isConstantSchema = exports.isDictionarySchema = exports.getElementType = void 0;
const codemodel_1 = require("@autorest/codemodel");
const languageHelpers_1 = require("../utils/languageHelpers");
const nameUtils_1 = require("../utils/nameUtils");
/**
 * Get the Typescript type to generate from an Schema
 * @param schema - Schema to find element type for
 * @param importedModels - Set to track models to import
 */
function getElementType(schema, importedModels = new Set()) {
    if (isArraySchema(schema)) {
        // Recursively find out the type for the elements in the array.
        return `Array<${getElementType(schema.elementType, importedModels)}>`;
    }
    if (isPrimitiveSchema(schema)) {
        return `${primitiveSchemaToType(schema)}`;
    }
    if (isAnyObjectSchema(schema)) {
        return `Record<string, unknown>`;
    }
    if (codemodel_1.isObjectSchema(schema)) {
        const { name } = getObjectInfo(schema);
        importedModels.add(name);
        return `${name}`;
    }
    if (isDictionarySchema(schema)) {
        return `Record<string, ${getElementType(schema.elementType, importedModels)}>`;
    }
    throw new Error(`Don't know how to get type for schema ${schema.type}`);
}
exports.getElementType = getElementType;
/**
 * Determine whether or not a schema maps to a Typescript primitive type.
 */
function isPrimitiveSchema(schema) {
    return [
        codemodel_1.SchemaType.Binary,
        codemodel_1.SchemaType.String,
        codemodel_1.SchemaType.Number,
        codemodel_1.SchemaType.Integer,
        codemodel_1.SchemaType.Date,
        codemodel_1.SchemaType.DateTime,
        codemodel_1.SchemaType.Any,
        codemodel_1.SchemaType.Boolean,
        codemodel_1.SchemaType.ByteArray,
        codemodel_1.SchemaType.Char,
        codemodel_1.SchemaType.Credential,
        codemodel_1.SchemaType.Duration,
        codemodel_1.SchemaType.Time,
        codemodel_1.SchemaType.UnixTime,
        codemodel_1.SchemaType.Uri,
        codemodel_1.SchemaType.Uuid,
        codemodel_1.SchemaType.Unknown,
        codemodel_1.SchemaType.Constant,
        codemodel_1.SchemaType.Choice,
        codemodel_1.SchemaType.SealedChoice
    ].includes(schema.type);
}
/**
 * Given a primitive schema, determines the Typescript type to generate
 * @param schema - Schema to generate a type for
 * @returns a string with the Typescript type to generate for the given schema
 */
function primitiveSchemaToType(schema) {
    switch (schema.type) {
        case codemodel_1.SchemaType.Any:
            return "any";
        case codemodel_1.SchemaType.Integer:
        case codemodel_1.SchemaType.Number:
            return "number";
        case codemodel_1.SchemaType.Date:
        case codemodel_1.SchemaType.Time:
        case codemodel_1.SchemaType.DateTime:
            return "Date";
        case codemodel_1.SchemaType.Char:
            return "string";
        case codemodel_1.SchemaType.Binary:
        case codemodel_1.SchemaType.Duration:
        case codemodel_1.SchemaType.Credential:
        case codemodel_1.SchemaType.UnixTime:
        case codemodel_1.SchemaType.Uri:
        case codemodel_1.SchemaType.Uuid:
        case codemodel_1.SchemaType.String:
            return "string";
        case codemodel_1.SchemaType.Boolean:
            return "boolean";
        case codemodel_1.SchemaType.ByteArray:
            return "Uint8Array";
        case codemodel_1.SchemaType.Choice:
        case codemodel_1.SchemaType.SealedChoice:
            return schema.choices
                .map(choice => `"${choice.value}"`)
                .join(" | ");
        case codemodel_1.SchemaType.Constant:
            const value = schema.value.value;
            return typeof value === "string" ? `"${value}"` : value;
    }
    throw new Error(`Unknown primitive schema ${schema.type}`);
}
/**
 * Gets object schema metadata
 * @param schema - Schema definition of an object
 */
function getObjectInfo(schema) {
    const name = nameUtils_1.normalizeName(languageHelpers_1.getLanguageMetadata(schema.language).name, nameUtils_1.NameType.Interface, true);
    return {
        name
    };
}
function isArraySchema(schema) {
    return schema.type === codemodel_1.SchemaType.Array;
}
function isAnyObjectSchema(schema) {
    return schema.type === codemodel_1.SchemaType.AnyObject;
}
function isDictionarySchema(schema) {
    return schema.type === codemodel_1.SchemaType.Dictionary;
}
exports.isDictionarySchema = isDictionarySchema;
function isConstantSchema(schema) {
    return schema.type === codemodel_1.SchemaType.Constant;
}
exports.isConstantSchema = isConstantSchema;
//# sourceMappingURL=schemaHelpers.js.map