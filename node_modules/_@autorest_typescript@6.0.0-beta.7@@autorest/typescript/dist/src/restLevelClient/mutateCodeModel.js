"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.performCodeModelMutations = void 0;
const languageHelpers_1 = require("../utils/languageHelpers");
/**
 * In order to avoid common calculations, we can use the language specific fields
 * to store commonly calculated information
 */
function performCodeModelMutations(model) {
    setOperationName(model);
    escapeDescriptionOnAllSchemas(model);
}
exports.performCodeModelMutations = performCodeModelMutations;
/**
 * Sets the operation name appending the operationGroup name if there are more than one OperationGroups
 */
function setOperationName(model) {
    model.operationGroups.forEach(og => og.operations.forEach(o => {
        const operationName = languageHelpers_1.getLanguageMetadata(o.language).name;
        if (!o.language.typescript) {
            o.language.typescript = Object.assign({}, o.language.default);
        }
        // No need to append operation group name if there is only a single OperationGroup
        if (model.operationGroups.length > 1) {
            o.language.typescript.name = `${languageHelpers_1.getLanguageMetadata(og.language).name}${operationName}`;
        }
    }));
}
/**
 * Escapes the description according to azure-sdks-for-js repo lint rules to make sure
 * TSDoc strings are renderd correctly
 */
function escapeDescription(schema) {
    if (!schema.language.typescript) {
        schema.language.typescript = Object.assign({}, schema.language.default);
    }
    schema.language.default.description = schema.language.default.description.replace(/@/g, "\\@");
    schema.language.default.description = schema.language.default.description.replace(/{/g, "\\{");
    schema.language.default.description = schema.language.default.description.replace(/}/g, "\\}");
}
/**
 * Apply description escaping to all Schemas
 */
function escapeDescriptionOnAllSchemas(model) {
    var _a, _b, _c;
    (_a = model.schemas.objects) === null || _a === void 0 ? void 0 : _a.forEach(escapeDescription);
    (_b = model.schemas.choices) === null || _b === void 0 ? void 0 : _b.forEach(escapeDescription);
    (_c = model.schemas.sealedChoices) === null || _c === void 0 ? void 0 : _c.forEach(escapeDescription);
    model.operationGroups.forEach(og => {
        og.operations.forEach(o => {
            var _a;
            escapeDescription(o);
            (_a = o.signatureParameters) === null || _a === void 0 ? void 0 : _a.forEach(escapeDescription);
        });
    });
}
//# sourceMappingURL=mutateCodeModel.js.map