"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStatusCode = exports.responseToSchemaResponse = exports.getResponseTypeName = void 0;
const codemodel_1 = require("@autorest/codemodel");
const languageHelpers_1 = require("../utils/languageHelpers");
const nameUtils_1 = require("../utils/nameUtils");
const schemaHelpers_1 = require("../utils/schemaHelpers");
function getResponseTypeName(operation, response) {
    const statusCode = getStatusCode(response);
    return nameUtils_1.normalizeName(`${languageHelpers_1.getLanguageMetadata(operation.language).name}${statusCode}Response`, nameUtils_1.NameType.Interface);
}
exports.getResponseTypeName = getResponseTypeName;
function responseToSchemaResponse(response) {
    if (!schemaHelpers_1.isSchemaResponse(response)) {
        return new codemodel_1.SchemaResponse(new codemodel_1.AnyObjectSchema("AnyObject schema"), Object.assign({}, response));
    }
    else {
        return response;
    }
}
exports.responseToSchemaResponse = responseToSchemaResponse;
/**
 * Extracts the status code for a given response definition
 * @param response - response definition to extract the status code from
 */
function getStatusCode(response) {
    var _a;
    if (response.protocol.http === undefined) {
        throw new Error("generateResponseTypes.getStatusCode: Can't extract response definition statusCode from undefined http metadata");
    }
    // Extracting the status code for the response definition. Eventhough it is represented as an array of status codes
    // in M4, in reality it can only contain a single status code, hence we are always picking the first one.
    let statusCode = (_a = response.protocol.http) === null || _a === void 0 ? void 0 : _a.statusCodes[0];
    // Swagger can define a catch all status code "default" to get any other status code not explicitly defined
    // however default is not a valid HTTP status code. We are setting 500 as a catch all status code instead
    // which is a valid http status
    // if (statusCode === "default") {
    //   return `"500"`;
    // }
    return `"${statusCode}"`;
}
exports.getStatusCode = getStatusCode;
//# sourceMappingURL=operationHelpers.js.map