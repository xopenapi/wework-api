"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateRestLevelClient = void 0;
const autorestSession_1 = require("../autorestSession");
const ts_morph_1 = require("ts-morph");
const packageFileGenerator_1 = require("../generators/static/packageFileGenerator");
const licenseFileGenerator_1 = require("../generators/static/licenseFileGenerator");
const tsConfigFileGenerator_1 = require("../generators/static/tsConfigFileGenerator");
const apiExtractorConfig_1 = require("../generators/static/apiExtractorConfig");
const generateResponseTypes_1 = require("./generateResponseTypes");
const mutateCodeModel_1 = require("./mutateCodeModel");
const generateSchemaTypes_1 = require("./generateSchemaTypes");
const prettier_1 = require("prettier");
const config_1 = require("./config");
const generateParameterTypes_1 = require("./generateParameterTypes");
const generateClient_1 = require("./generateClient");
/**
 * Generates a Rest Level Client library
 */
function generateRestLevelClient() {
    return __awaiter(this, void 0, void 0, function* () {
        const host = autorestSession_1.getHost();
        const { model } = autorestSession_1.getSession();
        const project = new ts_morph_1.Project({
            useInMemoryFileSystem: true,
            manipulationSettings: {
                indentationText: ts_morph_1.IndentationText.TwoSpaces
            }
        });
        mutateCodeModel_1.performCodeModelMutations(model);
        packageFileGenerator_1.generatePackageJson(project);
        licenseFileGenerator_1.generateLicenseFile(project);
        tsConfigFileGenerator_1.generateTsConfig(project);
        apiExtractorConfig_1.generateApiExtractorConfig(project);
        generateResponseTypes_1.generateResponseInterfaces(model, project);
        generateSchemaTypes_1.generateSchemaTypes(model, project);
        generateParameterTypes_1.generateParameterInterfaces(model, project);
        generateClient_1.generatePathFirstClient(model, project);
        // Save the source files to the virtual filesystem
        project.saveSync();
        const fs = project.getFileSystem();
        // Loop over the files
        for (const file of project.getSourceFiles()) {
            const filePath = file.getFilePath();
            const isJson = /\.json$/gi.test(filePath);
            const isSourceCode = /\.(ts|js)$/gi.test(filePath);
            let fileContents = fs.readFileSync(filePath);
            const licenseHeader = `// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n`;
            if (!isJson) {
                fileContents = `${licenseHeader.trimLeft()}\n${fileContents}`;
            }
            // Format the contents if necessary
            if (isJson || isSourceCode) {
                fileContents = prettier_1.format(fileContents, isJson ? config_1.prettierJSONOptions : config_1.prettierTypeScriptOptions);
            }
            // Write the file to the AutoRest host
            host.WriteFile(filePath.substr(1), // Get rid of the leading slash '/'
            fileContents);
        }
    });
}
exports.generateRestLevelClient = generateRestLevelClient;
//# sourceMappingURL=generateRestLevel.js.map