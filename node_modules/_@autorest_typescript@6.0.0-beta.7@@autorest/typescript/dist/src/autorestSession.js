"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAutorestOptions = exports.getHost = exports.getSession = exports.initializeSession = void 0;
const extension_base_1 = require("@autorest/extension-base");
const codemodel_1 = require("@autorest/codemodel");
const autorestOptions_1 = require("./utils/autorestOptions");
let host;
let session;
let options;
function initializeSession(autorestHost) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!host) {
            host = autorestHost;
        }
        if (!session) {
            session = yield extension_base_1.startSession(host, undefined, codemodel_1.codeModelSchema);
        }
        if (!options) {
            options = yield autorestOptions_1.extractAutorestOptions();
        }
    });
}
exports.initializeSession = initializeSession;
function getSession() {
    if (!session) {
        throw new Error("Session has not been initialized, make sure to call initializeSession early in the plugin startup");
    }
    return session;
}
exports.getSession = getSession;
function getHost() {
    if (!host) {
        throw new Error("Host has not been initialized, make sure to call initializeSession early in the plugin startup");
    }
    return host;
}
exports.getHost = getHost;
function getAutorestOptions() {
    if (!options) {
        throw new Error("Options have not been initialized, make sure to call initializeSession early in the plugin startup");
    }
    return options;
}
exports.getAutorestOptions = getAutorestOptions;
//# sourceMappingURL=autorestSession.js.map