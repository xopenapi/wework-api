import { LroResourceLocationConfig, GetLroStatusFromResponse, LongRunningOperation, LroConfig, LroStatus, PollerConfig, RawResponse, ResumablePollOperationState } from "./models";
/**
 * creates a stepping function that maps an LRO state to another.
 */
export declare function createGetLroStatusFromResponse<TResult>(lroPrimitives: LongRunningOperation<TResult>, config: LroConfig, lroResourceLocationConfig?: LroResourceLocationConfig): GetLroStatusFromResponse<TResult>;
/**
 * Creates a polling operation that returns a LRO state.
 */
export declare function createPollForLROStatus<TResult>(lroPrimitives: LongRunningOperation<TResult>, config: LroConfig): (pollingURL: string, pollerConfig: PollerConfig) => Promise<LroStatus<TResult>>;
/**
 * Creates a callback to be used to initialize the polling operation state.
 * @param state - of the polling operation
 * @param operationSpec - of the LRO
 * @param callback - callback to be called when the operation is done
 * @returns callback that initializes the state of the polling operation
 */
export declare function createInitializeState<TResult>(state: ResumablePollOperationState<TResult>, requestPath: string, requestMethod: string): (rawResponse: RawResponse, flatResponse: unknown) => boolean;
//# sourceMappingURL=stateMachine.d.ts.map