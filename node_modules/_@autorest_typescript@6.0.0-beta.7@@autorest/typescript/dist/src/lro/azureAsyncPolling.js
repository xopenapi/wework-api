"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.processAzureAsyncOperationResult = void 0;
const models_1 = require("./models");
const requestUtils_1 = require("./requestUtils");
function getResponseStatus(rawResponse) {
    var _a, _b;
    const { status } = (_a = rawResponse.body) !== null && _a !== void 0 ? _a : {};
    return (_b = status === null || status === void 0 ? void 0 : status.toLowerCase()) !== null && _b !== void 0 ? _b : "succeeded";
}
function isAzureAsyncPollingDone(rawResponse) {
    const state = getResponseStatus(rawResponse);
    if (requestUtils_1.isUnexpectedPollingResponse(rawResponse) || models_1.failureStates.includes(state)) {
        throw new Error(`Operation status: ${state}`);
    }
    return models_1.successStates.includes(state);
}
function sendFinalRequest(lro, lroResourceLocationConfig, resourceLocation) {
    return __awaiter(this, void 0, void 0, function* () {
        switch (lroResourceLocationConfig) {
            case "original-uri":
                return lro.retrieveAzureAsyncResource();
            case "azure-async-operation":
                return Promise.resolve(undefined);
            case "location":
            default:
                return lro.retrieveAzureAsyncResource(resourceLocation);
        }
    });
}
function processAzureAsyncOperationResult(lro, resourceLocation, lroResourceLocationConfig) {
    return (rawResponse, flatResponse) => {
        if (isAzureAsyncPollingDone(rawResponse)) {
            if (resourceLocation === undefined) {
                return { rawResponse, flatResponse, done: true };
            }
            else {
                return {
                    rawResponse,
                    flatResponse,
                    done: false,
                    next: () => __awaiter(this, void 0, void 0, function* () {
                        const finalResponse = yield sendFinalRequest(lro, lroResourceLocationConfig, resourceLocation);
                        return Object.assign(Object.assign({}, (finalResponse !== null && finalResponse !== void 0 ? finalResponse : {
                            rawResponse,
                            flatResponse
                        })), { done: true });
                    })
                };
            }
        }
        return {
            rawResponse,
            flatResponse,
            done: false
        };
    };
}
exports.processAzureAsyncOperationResult = processAzureAsyncOperationResult;
//# sourceMappingURL=azureAsyncPolling.js.map