"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.LroEngine = void 0;
const core_lro_1 = require("@azure/core-lro");
const operation_1 = require("./operation");
/**
 * The LRO Engine, a class that performs polling.
 */
class LroEngine extends core_lro_1.Poller {
    constructor(lro, options) {
        const { intervalInMs = 2000, resumeFrom } = options || {};
        function deserializeState(resumeFrom) {
            try {
                return JSON.parse(resumeFrom).state;
            }
            catch (e) {
                throw new Error(`LroEngine: Unable to deserialize state: ${resumeFrom}`);
            }
        }
        const state = resumeFrom
            ? deserializeState(resumeFrom)
            : {};
        const operation = new operation_1.GenericPollOperation(state, lro);
        super(operation);
        this.intervalInMs = intervalInMs;
        operation.setPollerConfig(this);
    }
    /**
     * The method used by the poller to wait before attempting to update its operation.
     */
    delay() {
        return new Promise(resolve => setTimeout(() => resolve(), this.intervalInMs));
    }
}
exports.LroEngine = LroEngine;
//# sourceMappingURL=lroEngine.js.map