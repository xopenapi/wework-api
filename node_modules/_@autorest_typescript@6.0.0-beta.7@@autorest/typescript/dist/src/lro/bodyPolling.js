"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.processBodyPollingOperationResult = exports.isBodyPollingDone = void 0;
const models_1 = require("./models");
const requestUtils_1 = require("./requestUtils");
function getProvisioningState(rawResponse) {
    var _a, _b, _c;
    const { properties, provisioningState } = (_a = rawResponse.body) !== null && _a !== void 0 ? _a : {};
    const state = (_b = properties === null || properties === void 0 ? void 0 : properties.provisioningState) !== null && _b !== void 0 ? _b : provisioningState;
    return (_c = state === null || state === void 0 ? void 0 : state.toLowerCase()) !== null && _c !== void 0 ? _c : "succeeded";
}
function isBodyPollingDone(rawResponse) {
    const state = getProvisioningState(rawResponse);
    if (requestUtils_1.isUnexpectedPollingResponse(rawResponse) || models_1.failureStates.includes(state)) {
        throw new Error(`The long running operation has failed. The provisioning state: ${state}.`);
    }
    return models_1.successStates.includes(state);
}
exports.isBodyPollingDone = isBodyPollingDone;
/**
 * Creates a polling strategy based on BodyPolling which uses the provisioning state
 * from the result to determine the current operation state
 */
function processBodyPollingOperationResult(rawResponse, flatResponse) {
    return {
        rawResponse,
        flatResponse,
        done: isBodyPollingDone(rawResponse)
    };
}
exports.processBodyPollingOperationResult = processBodyPollingOperationResult;
//# sourceMappingURL=bodyPolling.js.map